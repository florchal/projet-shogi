//
//  Testbibliosfml.cpp
//  Test-sfml
//
//  Created by alexandre chabot on 26/11/14.
//
//
#include <SFML/Graphics.hpp>
#include "main.h"
#include <cstdlib>
#include <iostream>
#include "Moteur.hpp"
#include "Plateau.hpp"
#define TailleFenetreH 1100
#define TailleFenetreV 700
#define TaillePlateau 700
#define TaillePion 70
#define Espace 20
#define TAnim 100

sf::RectangleShape plateau(sf::Vector2f(TaillePlateau, TaillePlateau));

sf::RectangleShape Joueur1(sf::Vector2f((TailleFenetreH-TailleFenetreV)/2,TailleFenetreV/10));
sf::RectangleShape Joueur2(sf::Vector2f((TailleFenetreH-TailleFenetreV)/2,TailleFenetreV/10));
sf::RectangleShape *Pions[9][9];

sf::RectangleShape Pion11 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion12 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion13 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion14 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion15 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion16 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion17 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion18 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion19 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion21 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion22 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion23 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion24 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion25 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion26 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion27 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion28 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Pion29 (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Tour1  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Tour2  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Fou1  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Fou2  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Cavalier11  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Cavalier12  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Cavalier21  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Cavalier22  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Chariot11  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Chariot12  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Chariot21  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Chariot22  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape GeneralArgent11  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape GeneralArgent12  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape GeneralArgent21  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape GeneralArgent22  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape GeneralOr11  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape GeneralOr12  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape GeneralOr21  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape GeneralOr22  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape Roi  (sf::Vector2f(TaillePion,TaillePion));
sf::RectangleShape jade  (sf::Vector2f(TaillePion,TaillePion));




int CoordToDamier(int *px, int *py,int taille);
int start(void);
int Coord(int *px, int *py,int taille);
int DamierToCoordx(int X);
int DamierToCoordy(int Y);
Moteur mot1 =Moteur::Moteur();

int main()
{
    sf::RenderWindow window(sf::VideoMode(TailleFenetreH, TailleFenetreV), "Shogi");
	sf::Color brown(196,131,58);
	sf::Color red(255,0,0);
	sf::Color Blank(255,255,255);
    plateau.setFillColor(brown);
	plateau.setPosition((TailleFenetreH-TailleFenetreV)/2,0);
	sf::Texture ban;
    if (!ban.loadFromFile("Plateau.png"))
    {
        std::cout<<"c'est un echec"<<std::endl;
    }	
	plateau.setTexture(&ban);
	
	
	Joueur2.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2,0);
	sf::Texture J1;
    if (!J1.loadFromFile("Joueur1.png"))
    {
        std::cout<<"c'est un echec"<<std::endl;
    }
    Joueur1.setTexture(&J1);
	sf::Texture J2;
    if (!J2.loadFromFile("Joueur2.png"))
    {
        std::cout<<"c'est un echec"<<std::endl;
    }
    Joueur2.setTexture(&J2);
	
	
	
	
	sf::Texture Soldat;
    if (!Soldat.loadFromFile("Soldat.png"))
    {
        std::cout<<"c'est un echec"<<std::endl;
    }
	sf::Texture Tour;
	if (!Tour.loadFromFile("Tour.png"))
    {
        std::cout<<"c'est un echec"<<std::endl;
    }
	sf::Texture Fou;
	if (!Fou.loadFromFile("Fou.png"))
    {
        std::cout<<"c'est un echec"<<std::endl;
    }
	sf::Texture Cavalier;
	if (!Cavalier.loadFromFile("Cavalier.png"))
    {
        std::cout<<"c'est un echec"<<std::endl;
    }
	sf::Texture Chariot;
	if (!Chariot.loadFromFile("Chariot.png"))
    {
        std::cout<<"c'est un echec"<<std::endl;
    }
	sf::Texture Generalargent;
	if (!Generalargent.loadFromFile("Generalargent.png"))
    {
        std::cout<<"c'est un echec"<<std::endl;
    }
	sf::Texture Generalor;
	if (!Generalor.loadFromFile("Generalor.png"))
    {
        std::cout<<"c'est un echec"<<std::endl;
    }
	sf::Texture Jade;
	if (!Jade.loadFromFile("Jade.png"))
    {
        std::cout<<"c'est un echec"<<std::endl;
    }
	sf::Texture General;
	if (!General.loadFromFile("General.png"))
    {
        std::cout<<"c'est un echec"<<std::endl;
    }
	Pions[0][6]=&Pion11; Pions[0][2]=&Pion21;
	Pions[1][6]=&Pion12; Pions[1][2]=&Pion22;
	Pions[2][6]=&Pion13; Pions[2][2]=&Pion23;
	Pions[3][6]=&Pion14; Pions[3][2]=&Pion24;
	Pions[4][6]=&Pion15; Pions[4][2]=&Pion25;
	Pions[5][6]=&Pion16; Pions[5][2]=&Pion26;
	Pions[6][6]=&Pion17; Pions[6][2]=&Pion27;
	Pions[7][6]=&Pion18; Pions[7][2]=&Pion28;
	Pions[8][6]=&Pion19; Pions[8][2]=&Pion29;
	Pions[1][7]=&Fou1; Pions[7][1]=&Fou2;
	Pions[7][7]=&Tour1; Pions[1][1]=&Tour2;
	Pions[0][8]=&Chariot11; Pions[0][0]=&Chariot21;
	Pions[1][8]=&Cavalier11; Pions[1][0]=&Cavalier21;
	Pions[2][8]=&GeneralArgent11; Pions[2][0]=&GeneralArgent21;
	Pions[3][8]=&GeneralOr11; Pions[3][0]=&GeneralOr21;
	Pions[4][8]=&Roi; Pions[4][0]=&jade;
	Pions[5][8]=&GeneralOr12; Pions[5][0]=&GeneralOr22;
	Pions[6][8]=&GeneralArgent12; Pions[6][0]=&GeneralArgent22;
	Pions[7][8]=&Cavalier12; Pions[7][0]=&Cavalier22;
	Pions[8][8]=&Chariot12; Pions[8][0]=&Chariot22;
	
	Pion11.setTexture(&Soldat);
	Pion12.setTexture(&Soldat);
	Pion13.setTexture(&Soldat);
	Pion14.setTexture(&Soldat);
	Pion15.setTexture(&Soldat);
	Pion16.setTexture(&Soldat);
	Pion17.setTexture(&Soldat);
	Pion18.setTexture(&Soldat);
	Pion19.setTexture(&Soldat);
	Pion21.setTexture(&Soldat);
	Pion22.setTexture(&Soldat);
	Pion23.setTexture(&Soldat);
	Pion24.setTexture(&Soldat);
	Pion25.setTexture(&Soldat);
	Pion26.setTexture(&Soldat);
	Pion27.setTexture(&Soldat);
	Pion28.setTexture(&Soldat);
	Pion29.setTexture(&Soldat);
	Tour1.setTexture(&Tour);
	Tour2.setTexture(&Tour);
	Fou1.setTexture(&Fou);
	Fou2.setTexture(&Fou);
	Cavalier11.setTexture(&Cavalier);
	Cavalier12.setTexture(&Cavalier);
	Cavalier21.setTexture(&Cavalier);
	Cavalier22.setTexture(&Cavalier);
	Chariot11.setTexture(&Chariot);
	Chariot12.setTexture(&Chariot);
	Chariot21.setTexture(&Chariot);
	Chariot22.setTexture(&Chariot);
	GeneralArgent11.setTexture(&Generalargent);
	GeneralArgent12.setTexture(&Generalargent);
	GeneralArgent21.setTexture(&Generalargent);
	GeneralArgent22.setTexture(&Generalargent);
	GeneralOr11.setTexture(&Generalor);
	GeneralOr12.setTexture(&Generalor); 
	GeneralOr21.setTexture(&Generalor);
	GeneralOr22.setTexture(&Generalor);
	Roi.setTexture(&General);
	jade.setTexture(&Jade);
	
	// Rotation des Pièces du Joueur 2
	Pion21.setOrigin(70,70);
	Pion22.setOrigin(70,70);
	Pion23.setOrigin(70,70);
	Pion24.setOrigin(70,70);
	Pion25.setOrigin(70,70);
	Pion26.setOrigin(70,70);
	Pion27.setOrigin(70,70);
	Pion28.setOrigin(70,70);
	Pion29.setOrigin(70,70);
	Tour2.setOrigin(70,70);
	Fou2.setOrigin(70,70);
	Cavalier21.setOrigin(70,70);
	Cavalier22.setOrigin(70,70);
	Chariot21.setOrigin(70,70);
	Chariot22.setOrigin(70,70);
	GeneralArgent21.setOrigin(70,70);
	GeneralArgent22.setOrigin(70,70);
	jade.setOrigin(70,70);
	Pion21.setRotation(180);
	Pion22.setRotation(180);
	Pion23.setRotation(180);
	Pion24.setRotation(180);
	Pion25.setRotation(180);
	Pion26.setRotation(180);
	Pion27.setRotation(180);
	Pion28.setRotation(180);
	Pion29.setRotation(180);
	Tour2.setRotation(180);
	Fou2.setRotation(180);
	Cavalier21.setRotation(180);
	Cavalier22.setRotation(180);
	Chariot21.setRotation(180);
	Chariot22.setRotation(180);
	GeneralArgent21.setRotation(180);
	GeneralArgent22.setRotation(180);
	jade.setRotation(180);
	// Placement des pièces sur le côté de l'échiquier
	Pion11.setPosition(Espace,TailleFenetreV/10);
	Pion12.setPosition(Espace,2*TailleFenetreV/10);
	Pion13.setPosition(Espace,3*TailleFenetreV/10);
	Pion14.setPosition(Espace,4*TailleFenetreV/10);
	Pion15.setPosition(Espace,5*TailleFenetreV/10);
	Pion16.setPosition(2*Espace+TaillePion,TailleFenetreV/10);
	Pion17.setPosition(2*Espace+TaillePion,2*TailleFenetreV/10);
	Pion18.setPosition(2*Espace+TaillePion,3*TailleFenetreV/10);
	Pion19.setPosition(2*Espace+TaillePion,4*TailleFenetreV/10);
	Pion21.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+Espace,TailleFenetreV/10);
	Pion22.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+Espace,2*TailleFenetreV/10);
	Pion23.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+Espace,3*TailleFenetreV/10);
	Pion24 .setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+Espace,4*TailleFenetreV/10);
	Pion25.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+Espace,5*TailleFenetreV/10);
	Pion26.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+2*Espace+TaillePion,TailleFenetreV/10);
	Pion27.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+2*Espace+TaillePion,2*TailleFenetreV/10);
	Pion28.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+2*Espace+TaillePion,3*TailleFenetreV/10);
	Pion29.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+2*Espace+TaillePion,4*TailleFenetreV/10);
	Tour1.setPosition(Espace,6*TailleFenetreV/10);
	Tour2.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+Espace,6*TailleFenetreV/10);
	Fou1.setPosition(2*Espace+TaillePion,6*TailleFenetreV/10);
	Fou2.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+2*Espace+TaillePion,6*TailleFenetreV/10);
	Cavalier11.setPosition(Espace,7*TailleFenetreV/10);
	Cavalier12.setPosition(2*Espace+TaillePion,7*TailleFenetreV/10);
	Cavalier21.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+Espace,7*TailleFenetreV/10);
	Cavalier22.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+2*Espace+TaillePion,7*TailleFenetreV/10);
	Chariot11.setPosition(Espace,8*TailleFenetreV/10);
	Chariot12.setPosition(2*Espace+TaillePion,8*TailleFenetreV/10);
	Chariot21.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+Espace,8*TailleFenetreV/10);
	Chariot22.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+2*Espace+TaillePion,8*TailleFenetreV/10);
	GeneralArgent11.setPosition(Espace,9*TailleFenetreV/10);
	GeneralArgent12.setPosition(2*Espace+TaillePion,9*TailleFenetreV/10);
	GeneralArgent21.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+Espace,9*TailleFenetreV/10);
	GeneralArgent22.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+2*Espace+TaillePion,9*TailleFenetreV/10);
	GeneralOr11.setPosition((TailleFenetreH-TailleFenetreV)/2+4*TaillePlateau/10,9*TailleFenetreV/10);
	GeneralOr12.setPosition((TailleFenetreH-TailleFenetreV)/2+6*TaillePlateau/10,9*TailleFenetreV/10);
	GeneralOr21.setOrigin(70,70);
	GeneralOr22.setOrigin(70,70);
	GeneralOr21.setRotation(180);
	GeneralOr22.setRotation(180);
	GeneralOr21.setPosition((TailleFenetreH-TailleFenetreV)/2+4*TaillePlateau/10,TailleFenetreV/10);
	GeneralOr22.setPosition((TailleFenetreH-TailleFenetreV)/2+6*TaillePlateau/10,TailleFenetreV/10);
	Roi.setPosition(2*Espace+TaillePion,5*TailleFenetreV/10);
	jade.setPosition(TailleFenetreH-(TailleFenetreH-TailleFenetreV)/2+2*Espace+TaillePion,5*TailleFenetreV/10);
	
	sf::Thread anim(&start);
	int lunch =0;
	int selection=0;
	int Clickx,Clicky =0;
	int posx[10];
	int posy[10];
	CoordToDamier(posx,posy,10);
	
	/*for(int i=0;i<9;i++)
	{
		for(int j=0;j<9;j++)
		{
			Pions[i][j]=sf::RectangleShape(sf::Vector2f(TaillePion,TaillePion));
		}
	}*/
	
	
	
  /* 	
    Pion11.setPosition
	Pion12
	Pion13
	Pion14
	Pion15
	Pion16
	Pion17
	Pion18 
	Pion19
	Pion21
	Pion22
	Pion23
	Pion24 
	Pion25
	Pion26
	Pion27
	Pion28
	Pion29
	Tour1
	Tour2
	Fou1
	Fou2
	Cavalier11
	Cavalier12
	Cavalier21
	Cavalier22
	Chariot1
	Chariot12
	Chariot21
	Chariot22
	GeneralArgent11
	GeneralArgent12
	GeneralArgent21
	GeneralArgent22
	GeneralOr11
	GeneralOr12 
	GeneralOr21
	GeneralOr22
	Roi
	jade*/
    
    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
			if (sf::Mouse::isButtonPressed(sf::Mouse::Right)&&(lunch==0))
			{
				anim.launch();
				lunch++;
			}
			else if((sf::Mouse::isButtonPressed(sf::Mouse::Left))&&(selection==1))
			{
				sf::Vector2i MousePosition= sf::Mouse::getPosition(window);
				selection=0;
				int result = mot1.coup(Clickx,Clicky,DamierToCoordx(MousePosition.x),DamierToCoordy(MousePosition.y));
				if(result==0)
				{
					selection=0;
					if( (DamierToCoordx(MousePosition.x)>=0)&&(DamierToCoordy(MousePosition.y)>=0)&&((DamierToCoordx(MousePosition.x)!=Clickx)||(DamierToCoordy(MousePosition.y)!=Clicky)))
					{
						std::cout<<"oui tu y rentres"<<DamierToCoordx(MousePosition.x)<<Clickx<<","<<DamierToCoordy(MousePosition.y)<<Clicky<<std::endl;
						Pions[Clickx][Clicky]->setPosition(posx[DamierToCoordx(MousePosition.x)+1],posy[DamierToCoordy(MousePosition.y)+1]);
						Pions[Clickx][Clicky]->setFillColor(Blank);
						Pions[DamierToCoordx(MousePosition.x)][DamierToCoordy(MousePosition.y)]=Pions[Clickx][Clicky];
						Pions[Clickx][Clicky]= NULL;
					}
				}
				
				else 
				{
					selection=0;
					/*sf::Window error(sf::VideoMode(40,60), "Déplacement impossible");
					
					
					while (error.isOpen())
					{
						sf::Event event2;
						while (error.pollEvent(event2))
						{
							if (event2.type == sf::Event::Closed)
								error.close();
						}
					}*/
					std::cout<<"la tu y rentres si tu te trompes dans le mouve"<<std::endl;
					
				}
			}
			else if((sf::Mouse::isButtonPressed(sf::Mouse::Left))&&(selection==0))
			{
				sf::Vector2i MousePosition = sf::Mouse::getPosition(window);
				selection++;
				Clickx=DamierToCoordx(MousePosition.x);
				//std::cout<<"La si tu rentres tu peux aller te pendre"<<std::endl;
				if(Clickx<0)
				{
					Clickx=0;
					selection=0;
				}
				Clicky=DamierToCoordy(MousePosition.y);
				if(Clicky<0)
				{
					Clicky=0;
					selection=0;
				}
				if(Pions[Clickx][Clicky]==NULL)
					selection=0;
				if(selection!=0)
				{
					Pions[Clickx][Clicky]->setFillColor(red);
				}
			
			}
			
			}
		
        
	
        window.clear();
        window.draw(plateau);
		window.draw(Joueur1);
		window.draw(Joueur2);
		window.draw(Pion11);
		window.draw(Pion12);
		window.draw(Pion13);
		window.draw(Pion14);
		window.draw(Pion15);
		window.draw(Pion16);
		window.draw(Pion17);
		window.draw(Pion18);
		window.draw(Pion19);
		window.draw(Pion21);
		window.draw(Pion22);
		window.draw(Pion23);
		window.draw(Pion24);
		window.draw(Pion25);
		window.draw(Pion26);
		window.draw(Pion27);
		window.draw(Pion28);
		window.draw(Pion29);
		window.draw(Roi);
		window.draw(jade);
		window.draw(Tour1);
		window.draw(Tour2);
		window.draw(Fou1);
		window.draw(Fou2);
		window.draw(Chariot11);
		window.draw(Chariot12);
		window.draw(Chariot21);
		window.draw(Chariot22);
		window.draw(Cavalier11);
		window.draw(Cavalier12);
		window.draw(Cavalier21);
		window.draw(Cavalier22);
		window.draw(GeneralArgent11);
		window.draw(GeneralArgent12);
		window.draw(GeneralArgent21);
		window.draw(GeneralArgent22);
		window.draw(GeneralOr11);
		window.draw(GeneralOr12);
		window.draw(GeneralOr21);
		window.draw(GeneralOr22);
		
	
        window.display();
    }
    
    return 0;
	
}

int CoordToDamier(int *px, int *py,int taille)
{
	for(int i=0;i<taille;i++)
	{
		px[i]=(TailleFenetreH-TailleFenetreV)/2+(i)*TaillePlateau/10;
		py[i]=(i)*TailleFenetreV/10;
	}
	return 0;
}

int DamierToCoordx(int X)
{
	X=X-(TailleFenetreH-TailleFenetreV)/2;
	if(X<TaillePlateau/10)
	return -1;
	else if(X<2*TaillePlateau/10)
	return 0;
	else if(X<3*TaillePlateau/10)
	return 1;
	else if(X<4*TaillePlateau/10)
	return 2;
	else if(X<5*TaillePlateau/10)
	return 3;
	else if(X<6*TaillePlateau/10)
	return 4;
	else if(X<7*TaillePlateau/10)
	return 5;
	else if(X<8*TaillePlateau/10)
	return 6;
	else if(X<9*TaillePlateau/10)
	return 7;
	else if(X<TaillePlateau)
	return 8;
	else 
		return -1;

}

int DamierToCoordy(int Y)
{	
	if(Y<TailleFenetreV/10)
		return -1;
	else if(Y<2*TailleFenetreV/10)
		return 0;
	else if(Y<3*TailleFenetreV/10)
		return 1;
	else if(Y<4*TailleFenetreV/10)
		return 2;
	else if(Y<5*TailleFenetreV/10)
		return 3;
	else if(Y<6*TailleFenetreV/10)
		return 4;
	else if(Y<7*TailleFenetreV/10)
		return 5;
	else if(Y<8*TailleFenetreV/10)
		return 6;
	else if(Y<9*TailleFenetreV/10)
		return 7;
	else if(Y<TailleFenetreV)
		return 8;
	else 
		return -1;
}

int start(void)
{
	
	sf::Clock clock; // démarre le chrono
	clock.restart();
	sf::Time elapsed1 = clock.getElapsedTime();
	std::cout << elapsed1.asMilliseconds() << std::endl;
	int tmp=0;
	int px[10];
	int py[10];
	CoordToDamier(px,py,10);
	while(1)
	{
		elapsed1=clock.getElapsedTime();
		if(elapsed1.asMilliseconds()>TAnim)
		{
			tmp++;
			clock.restart();
			
		}
		
		switch(tmp)
		{
					
	case 1 : Pion11.setPosition(px[1],py[7]); Pion21.setPosition(px[1],py[3]); break;
	case 2 : Pion12.setPosition(px[2],py[7]); Pion22.setPosition(px[2],py[3]); break;
	case 3 : Pion13.setPosition(px[3],py[7]); Pion23.setPosition(px[3],py[3]); break;
	case 4 : Pion14.setPosition(px[4],py[7]); Pion24.setPosition(px[4],py[3]); break;
	case 5 : Pion15.setPosition(px[5],py[7]); Pion25.setPosition(px[5],py[3]); break;
	case 6 : Pion16.setPosition(px[6],py[7]); Pion26.setPosition(px[6],py[3]); break;
	case 7 : Pion17.setPosition(px[7],py[7]); Pion27.setPosition(px[7],py[3]); break;
	case 8 : Pion18.setPosition(px[8],py[7]); Pion28.setPosition(px[8],py[3]); break;
	case 9 : Pion19.setPosition(px[9],py[7]); Pion29.setPosition(px[9],py[3]); break;
	case 10 :Fou1.setPosition(px[2],py[8]); Fou2.setPosition(px[8],py[2]); break;
	case 11 :Tour1.setPosition(px[8],py[8]); Tour2.setPosition(px[2],py[2]); break;			
	case 12 :Chariot11.setPosition(px[1],py[9]); Chariot21.setPosition(px[1],py[1]); break;
	case 13 :Chariot12.setPosition(px[9],py[9]); Chariot22.setPosition(px[9],py[1]); break;
	case 14 :Cavalier11.setPosition(px[2],py[9]); Cavalier21.setPosition(px[2],py[1]); break;
	case 15 :Cavalier12.setPosition(px[8],py[9]); Cavalier22.setPosition(px[8],py[1]); break;
	case 16 :GeneralArgent11.setPosition(px[3],py[9]); GeneralArgent21.setPosition(px[3],py[1]); break;
	case 17 :GeneralArgent12.setPosition(px[7],py[9]); GeneralArgent22.setPosition(px[7],py[1]); break;
	case 18 :Roi.setPosition(px[5],py[9]); jade.setPosition(px[5],py[1]);return 1; break;
		}
		
		
	}	
	return 0;
}
